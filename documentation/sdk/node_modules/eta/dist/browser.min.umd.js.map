{"version":3,"file":"browser.min.umd.js","sources":["../src/err.ts","../src/polyfills.ts","../src/utils.ts","../src/parse.ts","../src/compile-string.ts","../src/storage.ts","../src/containers.ts","../src/config.ts","../src/compile.ts","../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto);\n  } else {\n    obj.__proto__ = proto;\n  }\n}\n\n// This is pretty much the only way to get nice, extended Errors\n// without using ES6\n\n/**\n * This returns a new Error with a custom prototype. Note that it's _not_ a constructor\n *\n * @param message Error message\n *\n * **Example**\n *\n * ```js\n * throw EtaErr(\"template not found\")\n * ```\n */\n\nexport default function EtaErr(message: string): Error {\n  const err = new Error(message);\n  setPrototypeOf(err, EtaErr.prototype);\n  return err as Error;\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: \"Eta Error\", enumerable: false },\n});\n\n/**\n * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.\n */\n\nexport function ParseErr(message: string, str: string, indx: number): void {\n  const whitespace = str.slice(0, indx).split(/\\n/);\n\n  const lineNo = whitespace.length;\n  const colNo = whitespace[lineNo - 1].length + 1;\n  message +=\n    \" at line \" +\n    lineNo +\n    \" col \" +\n    colNo +\n    \":\\n\\n\" +\n    \"  \" +\n    str.split(/\\n/)[lineNo - 1] +\n    \"\\n\" +\n    \"  \" +\n    Array(colNo).join(\" \") +\n    \"^\";\n  throw EtaErr(message);\n}\n","import EtaErr from \"./err.js\";\n\n/**\n * @returns The global Promise function\n */\n\nexport const promiseImpl: PromiseConstructor = new Function(\"return this\")().Promise;\n\n/**\n * @returns A new AsyncFunction constuctor\n */\n\nexport function getAsyncFunctionConstructor(): Function {\n  try {\n    return new Function(\"return (async function(){}).constructor\")();\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\"This environment doesn't support async/await\");\n    } else {\n      throw e;\n    }\n  }\n}\n\n/**\n * str.trimLeft polyfill\n *\n * @param str - Input string\n * @returns The string with left whitespace removed\n *\n */\n\nexport function trimLeft(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimLeft) {\n    return str.trimLeft();\n  } else {\n    return str.replace(/^\\s+/, \"\");\n  }\n}\n\n/**\n * str.trimRight polyfill\n *\n * @param str - Input string\n * @returns The string with right whitespace removed\n *\n */\n\nexport function trimRight(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimRight) {\n    return str.trimRight();\n  } else {\n    return str.replace(/\\s+$/, \"\"); // TODO: do we really need to replace BOM's?\n  }\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\nimport { trimLeft, trimRight } from \"./polyfills.js\";\n\n/* TYPES */\n\nimport type { EtaConfig } from \"./config.js\";\n\ninterface EscapeMap {\n  \"&\": \"&amp;\";\n  \"<\": \"&lt;\";\n  \">\": \"&gt;\";\n  '\"': \"&quot;\";\n  \"'\": \"&#39;\";\n  [index: string]: string;\n}\n\n/* END TYPES */\n\nexport function hasOwnProp(obj: object, prop: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function copyProps<T>(toObj: T, fromObj: T): T {\n  for (const key in fromObj) {\n    if (hasOwnProp(fromObj as unknown as object, key)) {\n      toObj[key] = fromObj[key];\n    }\n  }\n  return toObj;\n}\n\n/**\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\n */\n\nfunction trimWS(\n  str: string,\n  config: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  let leftTrim;\n  let rightTrim;\n\n  if (Array.isArray(config.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = config.autoTrim[1];\n    rightTrim = config.autoTrim[0];\n  } else {\n    leftTrim = rightTrim = config.autoTrim;\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft;\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight;\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str;\n  }\n\n  if (leftTrim === \"slurp\" && rightTrim === \"slurp\") {\n    return str.trim();\n  }\n\n  if (leftTrim === \"_\" || leftTrim === \"slurp\") {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n\n    str = trimLeft(str);\n  } else if (leftTrim === \"-\" || leftTrim === \"nl\") {\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, \"\");\n  }\n\n  if (rightTrim === \"_\" || rightTrim === \"slurp\") {\n    // full slurp\n    str = trimRight(str);\n  } else if (rightTrim === \"-\" || rightTrim === \"nl\") {\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, \"\"); // TODO: make sure this gets \\r\\n\n  }\n\n  return str;\n}\n\n/**\n * A map of special HTML characters to their XML-escaped equivalents\n */\n\nconst escMap: EscapeMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n};\n\nfunction replaceChar(s: string): string {\n  return escMap[s];\n}\n\n/**\n * XML-escapes an input value after converting it to a string\n *\n * @param str - Input value (usually a string)\n * @returns XML-escaped string\n */\n\nfunction XMLEscape(str: any): string {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  const newStr = String(str);\n  if (/[&<>\"']/.test(newStr)) {\n    return newStr.replace(/[&<>\"']/g, replaceChar);\n  } else {\n    return newStr;\n  }\n}\n\nexport { trimWS, XMLEscape };\n","import { ParseErr } from \"./err.js\";\nimport { trimWS } from \"./utils.js\";\n\n/* TYPES */\n\nimport type { EtaConfig } from \"./config.js\";\n\nexport type TagType = \"r\" | \"e\" | \"i\" | \"\";\n\nexport interface TemplateObject {\n  t: TagType;\n  val: string;\n}\n\nexport type AstObject = string | TemplateObject;\n\n/* END TYPES */\n\nconst templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g;\n\nconst singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g;\n\nconst doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g;\n\n/** Escape special regular expression characters inside a string */\n\nfunction escapeRegExp(string: string) {\n  // From MDN\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport default function parse(str: string, config: EtaConfig): Array<AstObject> {\n  let buffer: Array<AstObject> = [];\n  let trimLeftOfNextStr: string | false = false;\n  let lastIndex = 0;\n  const parseOptions = config.parse;\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processTemplate) {\n        str = plugin.processTemplate(str, config);\n      }\n    }\n  }\n\n  /* Adding for EJS compatibility */\n  if (config.rmWhitespace) {\n    // Code taken directly from EJS\n    // Have to use two separate replaces here as `^` and `$` operators don't\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\n    // Essentially, this replaces the whitespace at the beginning and end of\n    // each line and removes multiple newlines.\n    str = str.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n  }\n  /* End rmWhitespace option */\n\n  templateLitReg.lastIndex = 0;\n  singleQuoteReg.lastIndex = 0;\n  doubleQuoteReg.lastIndex = 0;\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      strng = trimWS(\n        strng,\n        config,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      );\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        strng = strng.replace(/\\\\|'/g, \"\\\\$&\").replace(/\\r\\n|\\n|\\r/g, \"\\\\n\");\n\n        buffer.push(strng);\n      }\n    }\n  }\n\n  const prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\n    accumulator,\n    prefix\n  ) {\n    if (accumulator && prefix) {\n      return accumulator + \"|\" + escapeRegExp(prefix);\n    } else if (prefix) {\n      // accumulator is falsy\n      return escapeRegExp(prefix);\n    } else {\n      // prefix and accumulator are both falsy\n      return accumulator;\n    }\n  },\n  \"\");\n\n  const parseOpenReg = new RegExp(\n    \"([^]*?)\" + escapeRegExp(config.tags[0]) + \"(-|_)?\\\\s*(\" + prefixes + \")?\\\\s*\",\n    \"g\"\n  );\n\n  const parseCloseReg = new RegExp(\n    \"'|\\\"|`|\\\\/\\\\*|(\\\\s*(-|_)?\" + escapeRegExp(config.tags[1]) + \")\",\n    \"g\"\n  );\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  let m;\n\n  while ((m = parseOpenReg.exec(str))) {\n    lastIndex = m[0].length + m.index;\n\n    const precedingString = m[1];\n    const wsLeft = m[2];\n    const prefix = m[3] || \"\"; // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft);\n\n    parseCloseReg.lastIndex = lastIndex;\n    let closeTag;\n    let currentObj: AstObject | false = false;\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        const content = str.slice(lastIndex, closeTag.index);\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;\n\n        trimLeftOfNextStr = closeTag[2];\n\n        const currentType: TagType =\n          prefix === parseOptions.exec\n            ? \"e\"\n            : prefix === parseOptions.raw\n            ? \"r\"\n            : prefix === parseOptions.interpolate\n            ? \"i\"\n            : \"\";\n\n        currentObj = { t: currentType, val: content };\n        break;\n      } else {\n        const char = closeTag[0];\n        if (char === \"/*\") {\n          const commentCloseInd = str.indexOf(\"*/\", parseCloseReg.lastIndex);\n\n          if (commentCloseInd === -1) {\n            ParseErr(\"unclosed comment\", str, closeTag.index);\n          }\n          parseCloseReg.lastIndex = commentCloseInd;\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index;\n\n          const singleQuoteMatch = singleQuoteReg.exec(str);\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index;\n          const doubleQuoteMatch = doubleQuoteReg.exec(str);\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        } else if (char === \"`\") {\n          templateLitReg.lastIndex = closeTag.index;\n          const templateLitMatch = templateLitReg.exec(str);\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      buffer.push(currentObj);\n    } else {\n      ParseErr(\"unclosed tag\", str, m.index + precedingString.length);\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false);\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, config);\n      }\n    }\n  }\n\n  return buffer;\n}\n","import Parse from \"./parse.js\";\n\n/* TYPES */\n\nimport type { EtaConfig } from \"./config.js\";\nimport type { AstObject } from \"./parse.js\";\n\n/* END TYPES */\n\n/**\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\n *\n * **Example**\n *\n * ```js\n * compileToString(\"Hi <%= it.user %>\", eta.config)\n * // \"var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\"\n * ```\n */\n\nexport default function compileToString(str: string, config: EtaConfig): string {\n  const buffer: Array<AstObject> = Parse(str, config);\n\n  let res =\n    \"var tR='',__l,__lP\" +\n    (config.include ? \",include=E.include.bind(E)\" : \"\") +\n    (config.includeFile ? \",includeFile=E.includeFile.bind(E)\" : \"\") +\n    \"\\nfunction layout(p,d){__l=p;__lP=d}\\n\" +\n    (config.useWith ? \"with(\" + config.varName + \"||{}){\" : \"\") +\n    compileScope(buffer, config) +\n    (config.includeFile\n      ? \"if(__l)tR=\" +\n        (config.async ? \"await \" : \"\") +\n        `includeFile(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : config.include\n      ? \"if(__l)tR=\" +\n        (config.async ? \"await \" : \"\") +\n        `include(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : \"\") +\n    \"if(cb){cb(null,tR)} return tR\" +\n    (config.useWith ? \"}\" : \"\");\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, config);\n      }\n    }\n  }\n\n  return res;\n}\n\n/**\n * Loops through the AST generated by `parse` and transform each item into JS calls\n *\n * **Example**\n *\n * ```js\n * // AST version of 'Hi <%= it.user %>'\n * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]\n * compileScope(templateAST, eta.config)\n * // \"tR+='Hi ';tR+=E.e(it.user);\"\n * ```\n */\n\nfunction compileScope(buff: Array<AstObject>, config: EtaConfig) {\n  let i = 0;\n  const buffLength = buff.length;\n  let returnStr = \"\";\n\n  for (i; i < buffLength; i++) {\n    const currentBlock = buff[i];\n    if (typeof currentBlock === \"string\") {\n      const str = currentBlock;\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"'\\n\";\n    } else {\n      const type = currentBlock.t; // ~, s, !, ?, r\n      let content = currentBlock.val || \"\";\n\n      if (type === \"r\") {\n        // raw\n\n        if (config.filter) {\n          content = \"E.filter(\" + content + \")\";\n        }\n\n        returnStr += \"tR+=\" + content + \"\\n\";\n      } else if (type === \"i\") {\n        // interpolate\n\n        if (config.filter) {\n          content = \"E.filter(\" + content + \")\";\n        }\n\n        if (config.autoEscape) {\n          content = \"E.e(\" + content + \")\";\n        }\n        returnStr += \"tR+=\" + content + \"\\n\";\n        // reference\n      } else if (type === \"e\") {\n        // execute\n        returnStr += content + \"\\n\"; // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr;\n}\n","import { copyProps } from \"./utils.js\";\n\n/**\n * Handles storage and accessing of values\n *\n * In this case, we use it to store compiled template functions\n * Indexed by their `name` or `filename`\n */\nclass Cacher<T> {\n  constructor(private cache: Record<string, T>) {}\n  define(key: string, val: T): void {\n    this.cache[key] = val;\n  }\n  get(key: string): T {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key];\n  }\n  remove(key: string): void {\n    delete this.cache[key];\n  }\n  reset(): void {\n    this.cache = {};\n  }\n  load(cacheObj: Record<string, T>): void {\n    copyProps(this.cache, cacheObj);\n  }\n}\n\nexport { Cacher };\n","import { Cacher } from \"./storage.js\";\n\n/* TYPES */\n\nimport type { TemplateFunction } from \"./compile.js\";\n\n/* END TYPES */\n\n/**\n * Eta's template storage\n *\n * Stores partials and cached templates\n */\n\nconst templates = new Cacher<TemplateFunction>({});\n\nexport { templates };\n","import { templates } from \"./containers.js\";\nimport { copyProps, XMLEscape } from \"./utils.js\";\nimport EtaErr from \"./err.js\";\n\n/* TYPES */\n\nimport type { TemplateFunction } from \"./compile.js\";\nimport type { Cacher } from \"./storage.js\";\n\ntype trimConfig = \"nl\" | \"slurp\" | false;\n\nexport interface EtaConfig {\n  /** Whether or not to automatically XML-escape interpolations. Default true */\n  autoEscape: boolean;\n\n  /** Configure automatic whitespace trimming. Default `[false, 'nl']` */\n  autoTrim: trimConfig | [trimConfig, trimConfig];\n\n  /** Compile to async function */\n  async: boolean;\n\n  /** Whether or not to cache templates if `name` or `filename` is passed */\n  cache: boolean;\n\n  /** XML-escaping function */\n  e: (str: string) => string;\n\n  /** Parsing options */\n  parse: {\n    /** Which prefix to use for evaluation. Default `\"\"` */\n    exec: string;\n\n    /** Which prefix to use for interpolation. Default `\"=\"` */\n    interpolate: string;\n\n    /** Which prefix to use for raw interpolation. Default `\"~\"` */\n    raw: string;\n  };\n\n  /** Array of plugins */\n  plugins: Array<{ processFnString?: Function; processAST?: Function; processTemplate?: Function }>;\n\n  /** Remove all safe-to-remove whitespace */\n  rmWhitespace: boolean;\n\n  /** Delimiters: by default `['<%', '%>']` */\n  tags: [string, string];\n\n  /** Holds template cache */\n  templates: Cacher<TemplateFunction>;\n\n  /** Name of the data object. Default `it` */\n  varName: string;\n\n  /** Absolute path to template file */\n  filename?: string;\n\n  /** Holds cache of resolved filepaths. Set to `false` to disable */\n  filepathCache?: Record<string, string> | false;\n\n  /** A filter function applied to every interpolation or raw interpolation */\n  filter?: Function;\n\n  /** Function to include templates by name */\n  include?: Function;\n\n  /** Function to include templates by filepath */\n  includeFile?: Function;\n\n  /** Name of template */\n  name?: string;\n\n  /** Where should absolute paths begin? Default '/' */\n  root?: string;\n\n  /** Make data available on the global object instead of varName */\n  useWith?: boolean;\n\n  /** Whether or not to cache templates if `name` or `filename` is passed: duplicate of `cache` */\n  \"view cache\"?: boolean;\n\n  /** Directory or directories that contain templates */\n  views?: string | Array<string>;\n\n  [index: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport interface EtaConfigWithFilename extends EtaConfig {\n  filename: string;\n}\n\nexport type PartialConfig = Partial<EtaConfig>;\nexport type PartialAsyncConfig = PartialConfig & { async: true };\n\n/* END TYPES */\n\n/**\n * Include a template based on its name (or filepath, if it's already been cached).\n *\n * Called like `include(templateNameOrPath, data)`\n */\n\nfunction includeHelper(this: EtaConfig, templateNameOrPath: string, data: object): string {\n  const template = this.templates.get(templateNameOrPath);\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"');\n  }\n  return template(data, this);\n}\n\n/** Eta's base (global) configuration */\nconst config: EtaConfig = {\n  async: false,\n  autoEscape: true,\n  autoTrim: [false, \"nl\"],\n  cache: false,\n  e: XMLEscape,\n  include: includeHelper,\n  parse: {\n    exec: \"\",\n    interpolate: \"=\",\n    raw: \"~\",\n  },\n  plugins: [],\n  rmWhitespace: false,\n  tags: [\"<%\", \"%>\"],\n  templates: templates,\n  useWith: false,\n  varName: \"it\",\n};\n\n/**\n * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result\n *\n * @param override Partial configuration object\n * @param baseConfig Partial configuration object to merge before `override`\n *\n * **Example**\n *\n * ```js\n * let customConfig = getConfig({tags: ['!#', '#!']})\n * ```\n */\n\nfunction getConfig(override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  const res: PartialConfig = {}; // Linked\n  copyProps(res, config); // Creates deep clone of eta.config, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig);\n  }\n\n  if (override) {\n    copyProps(res, override);\n  }\n\n  return res as EtaConfig;\n}\n\n/** Update Eta's base config */\n\nfunction configure(options: PartialConfig): Partial<EtaConfig> {\n  return copyProps(config, options);\n}\n\nexport { config, getConfig, configure };\n","import compileToString from \"./compile-string.js\";\nimport { getConfig } from \"./config.js\";\nimport EtaErr from \"./err.js\";\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig } from \"./config.js\";\nimport type { CallbackFn } from \"./file-handlers.js\";\nimport { getAsyncFunctionConstructor } from \"./polyfills.js\";\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string;\n\n/* END TYPES */\n\n/**\n * Takes a template string and returns a template function that can be called with (data, config, [cb])\n *\n * @param str - The template string\n * @param config - A custom configuration object (optional)\n *\n * **Example**\n *\n * ```js\n * let compiledFn = eta.compile(\"Hi <%= it.user %>\")\n * // function anonymous()\n * let compiledFnStr = compiledFn.toString()\n * // \"function anonymous(it,E,cb\\n) {\\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\\n}\"\n * ```\n */\n\nexport default function compile(str: string, config?: PartialConfig): TemplateFunction {\n  const options: EtaConfig = getConfig(config || {});\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  const ctor = options.async ? (getAsyncFunctionConstructor() as FunctionConstructor) : Function;\n  /* END ASYNC HANDLING */\n\n  try {\n    return new ctor(\n      options.varName,\n      \"E\", // EtaConfig\n      \"cb\", // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction; // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        \"Bad template syntax\\n\\n\" +\n          e.message +\n          \"\\n\" +\n          Array(e.message.length + 1).join(\"=\") +\n          \"\\n\" +\n          compileToString(str, options) +\n          \"\\n\" // This will put an extra newline before the callstack for extra readability\n      );\n    } else {\n      throw e;\n    }\n  }\n}\n","import compile from \"./compile.js\";\nimport { getConfig } from \"./config.js\";\nimport { promiseImpl } from \"./polyfills.js\";\nimport EtaErr from \"./err.js\";\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig, PartialAsyncConfig } from \"./config.js\";\nimport type { TemplateFunction } from \"./compile.js\";\nimport type { CallbackFn } from \"./file-handlers.js\";\n\n/* END TYPES */\n\nfunction handleCache(template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name);\n  }\n\n  const templateFunc = typeof template === \"function\" ? template : compile(template, options);\n\n  // Note that we don't have to check if it already exists in the cache;\n  // it would have returned earlier if it had\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc);\n  }\n\n  return templateFunc;\n}\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialAsyncConfig,\n  cb: CallbackFn\n): void;\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialAsyncConfig\n): Promise<string>;\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig\n): string;\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void;\n\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void {\n  const options = getConfig(config || {});\n\n  if (options.async) {\n    if (cb) {\n      // If user passes callback\n      try {\n        // Note: if there is an error while rendering the template,\n        // It will bubble up and be caught here\n        const templateFn = handleCache(template, options);\n        templateFn(data, options, cb);\n      } catch (err) {\n        return cb(err as Error);\n      }\n    } else {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === \"function\") {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            resolve(handleCache(template, options)(data, options));\n          } catch (err) {\n            reject(err);\n          }\n        });\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\");\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options);\n  }\n}\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig\n): Promise<string>;\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialConfig,\n  cb: CallbackFn\n): void;\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void;\n\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void {\n  // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills\n  return render(template, data, Object.assign({}, config, { async: true }), cb);\n}\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","slice","split","whitespace","length","colNo","lineNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","toObj","fromObj","key","hasOwnProperty","call","escMap","replaceChar","s","singleQuoteReg","doubleQuoteReg","escapeRegExp","string","replace","parse","config","buffer","trimLeftOfNextStr","parseOptions","plugins","i","plugin","processTemplate","pushString","strng","shouldTrimRightOfString","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","trimLeft","String","trimRight","trimWS","push","rmWhitespace","templateLitReg","lastIndex","m","prefixes","exec","interpolate","raw","reduce","accumulator","prefix","parseOpenReg","RegExp","tags","parseCloseReg","index","precedingString","closeTag","content","currentObj","t","val","_char","char","indexOf","commentCloseInd","processAST","Parse","res","include","includeFile","useWith","varName","buff","buffLength","currentBlock","returnStr","type","filter","autoEscape","compileScope","async","processFnString","templates","cache","this","define","_proto","get","remove","reset","load","cacheObj","copyProps","Cacher","e","newStr","test","templateNameOrPath","data","template","getConfig","override","baseConfig","compile","options","ctor","getAsyncFunctionConstructor","SyntaxError","compileToString","handleCache","templateFunc","render","cb","resolve","reject","templateFn","renderAsync","assign"],"mappings":"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"}