// Copyright 2023 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use getset::CopyGetters;
use packable::{prefix::BoxedSlicePrefix, Packable};

use crate::types::block::{
    protocol::{lower_bits, multiplication_and_shift, upper_bits},
    slot::EpochIndex,
    Error,
};

#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Packable, CopyGetters)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(rename_all = "camelCase")
)]
#[packable(unpack_error = Error)]
#[getset(get_copy = "pub")]
pub struct ManaStructure {
    /// The number of bits used to represent Mana.
    pub(crate) bits_count: u8,
    /// The amount of potential Mana generated by 1 IOTA in 1 slot.
    pub(crate) generation_rate: u8,
    /// The scaling of `mana_generation_rate` expressed as an exponent of 2.
    pub(crate) generation_rate_exponent: u8,
    /// A lookup table of epoch index diff to mana decay factor.
    #[packable(unpack_error_with = |_| Error::InvalidManaDecayFactors)]
    #[cfg_attr(feature = "serde", serde(with = "crate::utils::serde::boxed_slice_prefix"))]
    #[getset(skip)]
    pub(crate) decay_factors: BoxedSlicePrefix<u32, u16>,
    /// The scaling of `decay_factors` expressed as an exponent of 2.
    pub(crate) decay_factors_exponent: u8,
    /// An integer approximation of the sum of decay over epochs.
    pub(crate) decay_factor_epochs_sum: u32,
    /// The scaling of `mana_decay_factor_epochs_sum` expressed as an exponent of 2.
    pub(crate) decay_factor_epochs_sum_exponent: u8,
}

impl ManaStructure {
    /// Returns the mana decay factors slice.
    pub fn decay_factors(&self) -> &[u32] {
        &self.decay_factors
    }

    /// Returns the mana decay factor for the given epoch index.
    pub fn decay_factor_at(&self, epoch_index: impl Into<EpochIndex>) -> Option<u32> {
        self.decay_factors.get(*epoch_index.into() as usize).copied()
    }

    /// Returns the max mana that can exist with the mana bits defined.
    pub fn max_mana(&self) -> u64 {
        (1 << self.bits_count) - 1
    }

    pub fn decay(&self, mana: u64, epoch_delta: u64) -> u64 {
        if mana == 0 || epoch_delta == 0 {
            return mana;
        }

        // split the value into two uint64 variables to prevent overflowing
        let mut mana_hi = upper_bits(mana);
        let mut mana_lo = lower_bits(mana);

        // we keep applying the lookup table factors as long as n epochs are left
        let mut remaining_epochs = epoch_delta;

        while remaining_epochs > 0 {
            let epochs_to_decay = remaining_epochs.min(self.decay_factors().len() as u64);
            remaining_epochs -= epochs_to_decay;

            // Unwrap: Safe because the index is at most the length
            let decay_factor = self.decay_factor_at(epochs_to_decay - 1).unwrap();

            // apply the decay using fixed-point arithmetics.
            (mana_hi, mana_lo) =
                multiplication_and_shift(mana_hi, mana_lo, decay_factor, self.decay_factors_exponent());
        }

        // combine both uint64 variables to get the actual value
        mana_hi << 32 | mana_lo
    }

    pub(crate) fn generate_mana(&self, amount: u64, slot_delta: u32) -> u64 {
        if self.generation_rate() == 0 || slot_delta == 0 {
            return 0;
        }
        let amount_hi = upper_bits(amount);
        let amount_lo = lower_bits(amount);
        let (amount_hi, amount_lo) = multiplication_and_shift(
            amount_hi,
            amount_lo,
            slot_delta * self.generation_rate() as u32,
            self.generation_rate_exponent(),
        );
        amount_hi << 32 | amount_lo
    }
}

impl Default for ManaStructure {
    fn default() -> Self {
        // TODO: use actual values
        Self {
            bits_count: 10,
            generation_rate: Default::default(),
            generation_rate_exponent: Default::default(),
            decay_factors: Default::default(),
            decay_factors_exponent: Default::default(),
            decay_factor_epochs_sum: Default::default(),
            decay_factor_epochs_sum_exponent: Default::default(),
        }
    }
}
