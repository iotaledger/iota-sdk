// Copyright 2023 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use getset::CopyGetters;
use packable::{prefix::BoxedSlicePrefix, Packable};

use crate::types::block::{
    protocol::ProtocolParameters,
    slot::{EpochIndex, SlotIndex},
    Error,
};

#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Packable, CopyGetters)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(rename_all = "camelCase")
)]
#[packable(unpack_error = Error)]
#[getset(get_copy = "pub")]
pub struct ManaStructure {
    /// The number of bits used to represent Mana.
    pub(crate) bits_count: u8,
    /// The amount of potential Mana generated by 1 IOTA in 1 slot.
    pub(crate) generation_rate: u8,
    /// The scaling of `mana_generation_rate` expressed as an exponent of 2.
    pub(crate) generation_rate_exponent: u8,
    /// A lookup table of epoch index diff to mana decay factor.
    #[packable(unpack_error_with = |_| Error::InvalidManaDecayFactors)]
    #[cfg_attr(feature = "serde", serde(with = "crate::utils::serde::boxed_slice_prefix"))]
    #[getset(skip)]
    pub(crate) decay_factors: BoxedSlicePrefix<u32, u16>,
    /// The scaling of `decay_factors` expressed as an exponent of 2.
    pub(crate) decay_factors_exponent: u8,
    /// An integer approximation of the sum of decay over epochs.
    pub(crate) decay_factor_epochs_sum: u32,
    /// The scaling of `mana_decay_factor_epochs_sum` expressed as an exponent of 2.
    pub(crate) decay_factor_epochs_sum_exponent: u8,
}

impl ManaStructure {
    /// Returns the mana decay factors slice.
    pub fn decay_factors(&self) -> &[u32] {
        &self.decay_factors
    }

    /// Returns the mana decay factor for the given epoch index.
    pub fn decay_factor_at(&self, epoch_index: impl Into<EpochIndex>) -> Option<u32> {
        self.decay_factors.get(*epoch_index.into() as usize).copied()
    }

    /// Returns the max mana that can exist with the mana bits defined.
    pub fn max_mana(&self) -> u64 {
        (1 << self.bits_count) - 1
    }

    fn decay(&self, mana: u64, epoch_delta: u32) -> u64 {
        if mana == 0 || epoch_delta == 0 || self.decay_factors().is_empty() {
            return mana;
        }

        // split the value into two u64 variables to prevent overflowing
        let mut mana_hi = upper_bits(mana);
        let mut mana_lo = lower_bits(mana);

        // we keep applying the lookup table factors as long as n epochs are left
        let mut remaining_epochs = epoch_delta;

        while remaining_epochs > 0 {
            let epochs_to_decay = remaining_epochs.min(self.decay_factors().len() as u32);
            remaining_epochs -= epochs_to_decay;

            // Unwrap: Safe because the index is at most the length
            let decay_factor = self.decay_factor_at(epochs_to_decay - 1).unwrap();

            // apply the decay using fixed-point arithmetics.
            (mana_hi, mana_lo) =
                multiplication_and_shift(mana_hi, mana_lo, decay_factor, self.decay_factors_exponent());
        }

        // combine both u64 variables to get the actual value
        mana_hi << 32 | mana_lo
    }

    fn generate_mana(&self, amount: u64, slot_delta: u32) -> u64 {
        if self.generation_rate() == 0 || slot_delta == 0 {
            return 0;
        }
        fixed_point_multiply(
            amount,
            slot_delta * self.generation_rate() as u32,
            self.generation_rate_exponent(),
        )
    }
}

impl Default for ManaStructure {
    fn default() -> Self {
        // TODO: use actual values
        Self {
            bits_count: 10,
            generation_rate: Default::default(),
            generation_rate_exponent: Default::default(),
            decay_factors: Default::default(),
            decay_factors_exponent: Default::default(),
            decay_factor_epochs_sum: Default::default(),
            decay_factor_epochs_sum_exponent: Default::default(),
        }
    }
}

impl ProtocolParameters {
    /// Applies mana decay to the given mana.
    pub fn mana_with_decay(
        &self,
        mana: u64,
        slot_index_created: impl Into<SlotIndex>,
        slot_index_target: impl Into<SlotIndex>,
    ) -> Result<u64, Error> {
        let (slot_index_created, slot_index_target) = (slot_index_created.into(), slot_index_target.into());
        let (epoch_index_created, epoch_index_target) = (
            self.epoch_index_of(slot_index_created),
            self.epoch_index_of(slot_index_target),
        );
        if epoch_index_created > epoch_index_target {
            return Err(Error::InvalidEpochDelta {
                created: epoch_index_created,
                target: epoch_index_target,
            });
        }
        Ok(self
            .mana_structure()
            .decay(mana, epoch_index_target.0 - epoch_index_created.0))
    }

    /// Applies mana decay to the given stored mana.
    pub fn rewards_with_decay(
        &self,
        reward: u64,
        reward_epoch: impl Into<EpochIndex>,
        claimed_epoch: impl Into<EpochIndex>,
    ) -> Result<u64, Error> {
        let (reward_epoch, claimed_epoch) = (reward_epoch.into(), claimed_epoch.into());
        if reward_epoch > claimed_epoch {
            return Err(Error::InvalidEpochDelta {
                created: reward_epoch,
                target: claimed_epoch,
            });
        }
        Ok(self.mana_structure().decay(reward, claimed_epoch.0 - reward_epoch.0))
    }

    /// Calculates the potential mana that is generated by holding `amount` tokens from `slot_index_created` to
    /// `slot_index_target` and applies the decay to the result
    pub fn potential_mana(
        &self,
        amount: u64,
        slot_index_created: impl Into<SlotIndex>,
        slot_index_target: impl Into<SlotIndex>,
    ) -> Result<u64, Error> {
        let (slot_index_created, slot_index_target) = (slot_index_created.into(), slot_index_target.into());
        let (epoch_index_created, epoch_index_target) = (
            self.epoch_index_of(slot_index_created),
            self.epoch_index_of(slot_index_target),
        );
        if epoch_index_created > epoch_index_target {
            return Err(Error::InvalidEpochDelta {
                created: epoch_index_created,
                target: epoch_index_target,
            });
        }
        if slot_index_created >= slot_index_target {
            return Ok(0);
        }
        let mana_structure = self.mana_structure();

        Ok(if epoch_index_created == epoch_index_target {
            mana_structure.generate_mana(amount, slot_index_target.0 - slot_index_created.0)
        } else if epoch_index_target == epoch_index_created + 1 {
            let slots_before_next_epoch = self.first_slot_of(epoch_index_created + 1) - slot_index_created;
            let slots_since_epoch_start = slot_index_target - self.last_slot_of(epoch_index_target - 1);
            let mana_decayed = mana_structure.decay(mana_structure.generate_mana(amount, slots_before_next_epoch.0), 1);
            let mana_generated = mana_structure.generate_mana(amount, slots_since_epoch_start.0);
            mana_decayed + mana_generated
        } else {
            let c = fixed_point_multiply(
                amount,
                mana_structure.decay_factor_epochs_sum(),
                mana_structure.decay_factor_epochs_sum_exponent() + mana_structure.generation_rate_exponent()
                    - self.slots_per_epoch_exponent(),
            );
            let slots_before_next_epoch = self.first_slot_of(epoch_index_created + 1) - slot_index_created;
            let slots_since_epoch_start = slot_index_target - self.last_slot_of(epoch_index_target - 1);
            let potential_mana_n = mana_structure.decay(
                mana_structure.generate_mana(amount, slots_before_next_epoch.0),
                epoch_index_target.0 - epoch_index_created.0,
            );
            let potential_mana_n_1 = mana_structure.decay(c, epoch_index_target.0 - epoch_index_created.0);
            let potential_mana_0 = c + mana_structure.generate_mana(amount, slots_since_epoch_start.0)
                - (c >> mana_structure.generation_rate_exponent());
            potential_mana_0 - potential_mana_n_1 + potential_mana_n
        })
    }
}

/// Returns the upper 32 bits of a u64 value.
const fn upper_bits(v: u64) -> u64 {
    v >> 32
}

/// Returns the lower n bits of a u64 value.
const fn lower_n_bits(v: u64, n: u8) -> u64 {
    debug_assert!(n <= 64);
    v & u64::MAX >> (64 - n)
}

/// Returns the lower 32 bits of a u64 value.
const fn lower_bits(v: u64) -> u64 {
    v & 0xFFFFFFFF
}

/// Returns the result of the multiplication ((value_hi << 32 + value_lo) * mult_factor) >> shift_factor
/// (where mult_factor is a uint32, value_hi and value_lo are uint64 smaller than 2^32, and 0 <= shift_factor <=
/// 32), using only uint64 multiplication functions, without overflowing. The returned result is split
/// in 2 factors: value_hi and value_lo, one containing the upper 32 bits of the result and the other
/// containing the lower 32 bits.
fn multiplication_and_shift(mut value_hi: u64, mut value_lo: u64, mult_factor: u32, shift_factor: u8) -> (u64, u64) {
    debug_assert!(shift_factor <= 32);
    // multiply the integer part of value_hi by mult_factor
    value_hi *= mult_factor as u64;

    // the lower shift_factor bits of the result are extracted and shifted left to form the remainder.
    // value_lo is multiplied by mult_factor and right-shifted by shift_factor bits.
    // the sum of these two values forms the new lower part (value_lo) of the result.
    value_lo = (lower_n_bits(value_hi, shift_factor) << (32 - shift_factor))
        + ((value_lo * mult_factor as u64) >> shift_factor);

    // the right-shifted value_hi and the upper 32 bits of value_lo form the new higher part (value_hi) of the
    // result.
    value_hi = (value_hi >> shift_factor) + upper_bits(value_lo);

    // the lower 32 bits of value_lo form the new lower part of the result.
    value_lo = lower_bits(value_lo);

    // return the result as a fixed-point number composed of two 64-bit integers
    (value_hi, value_lo)
}

/// Wrapper for [`multiplication_and_shift`] that splits and re-combines the given value.
fn fixed_point_multiply(value: u64, mult_factor: u32, shift_factor: u8) -> u64 {
    let value_hi = upper_bits(value);
    let value_lo = lower_bits(value);
    let (amount_hi, amount_lo) = multiplication_and_shift(value_hi, value_lo, mult_factor, shift_factor);
    amount_hi << 32 | amount_lo
}

#[cfg(test)]
mod test {
    use super::*;

    // Tests from https://github.com/iotaledger/iota.go/blob/develop/mana_decay_provider_test.go

    const BETA_PER_YEAR: f64 = 1. / 3.;

    fn params() -> &'static ProtocolParameters {
        use once_cell::sync::Lazy;
        static PARAMS: Lazy<ProtocolParameters> = Lazy::new(|| {
            // TODO: these params are clearly wrong as the calculation fails due to shifting > 32 bits
            let mut params = ProtocolParameters {
                slots_per_epoch_exponent: 13,
                slot_duration_in_seconds: 10,
                mana_structure: ManaStructure {
                    bits_count: 63,
                    generation_rate: 1,
                    generation_rate_exponent: 27,
                    decay_factors_exponent: 32,
                    decay_factor_epochs_sum_exponent: 20,
                    ..Default::default()
                },
                ..Default::default()
            };
            // TODO: Just use the generated values from go
            params.mana_structure.decay_factors = {
                let epochs_per_year = ((365_u64 * 24 * 60 * 60) as f64 / params.slot_duration_in_seconds() as f64)
                    / params.slots_per_epoch() as f64;
                let beta_per_epoch_index = BETA_PER_YEAR / epochs_per_year;
                (1..epochs_per_year.floor() as usize)
                    .map(|epoch| {
                        ((-beta_per_epoch_index * epoch as f64).exp()
                            * 2_f64.powf(params.mana_structure().decay_factors_exponent() as _))
                        .floor() as u32
                    })
                    .collect::<Box<[_]>>()
            }
            .try_into()
            .unwrap();
            params.mana_structure.decay_factor_epochs_sum = {
                let delta = params.slots_per_epoch() as f64 * params.slot_duration_in_seconds() as f64
                    / (365_u64 * 24 * 60 * 60) as f64;
                (((-BETA_PER_YEAR * delta).exp() / (1. - (-BETA_PER_YEAR * delta).exp()))
                    * 2_f64.powf(params.mana_structure().decay_factor_epochs_sum_exponent() as _))
                .floor() as u32
            };
            params
        });
        &*PARAMS
    }

    #[test]
    fn test_mana_decay_no_factors() {
        let mana_structure = ManaStructure {
            decay_factors: Box::<[_]>::default().try_into().unwrap(),
            ..Default::default()
        };
        assert_eq!(mana_structure.decay(100, 100), 100);
    }

    #[test]
    fn test_mana_decay_no_delta() {
        assert_eq!(
            params().mana_with_decay(100, params().first_slot_of(1), params().first_slot_of(1)),
            Ok(100)
        );
    }

    #[test]
    fn test_mana_decay_no_mana() {
        assert_eq!(
            params().mana_with_decay(0, params().first_slot_of(1), params().first_slot_of(400)),
            Ok(0)
        );
    }

    #[test]
    fn test_mana_decay_negative_delta() {
        assert_eq!(
            params().mana_with_decay(100, params().first_slot_of(2), params().first_slot_of(1)),
            Err(Error::InvalidEpochDelta {
                created: 2.into(),
                target: 1.into()
            })
        );
    }

    // TODO: Re-enable the commented tests once the test data is sorted out
    // #[test]
    // fn test_mana_decay_lookup_len_delta() {
    //     assert_eq!(
    //         params().mana_with_decay(
    //             u64::MAX,
    //             params().first_slot_of(1),
    //             params().first_slot_of(params().mana_structure().decay_factors().len() as u32 + 1)
    //         ),
    //         Ok(13228672242897911807)
    //     );
    // }

    // #[test]
    // fn test_mana_decay_lookup_len_delta_multiple() {
    //     assert_eq!(
    //         params().mana_with_decay(
    //             u64::MAX,
    //             params().first_slot_of(1),
    //             params().first_slot_of(3 * params().mana_structure().decay_factors().len() as u32 + 1)
    //         ),
    //         Ok(6803138682699798504)
    //     );
    // }

    // #[test]
    // fn test_mana_decay_max_mana() {
    //     assert_eq!(
    //         params().mana_with_decay(u64::MAX, params().first_slot_of(1), params().first_slot_of(401)),
    //         Ok(13046663022640287317)
    //     );
    // }

    #[test]
    fn test_potential_mana_no_delta() {
        assert_eq!(
            params().potential_mana(100, params().first_slot_of(1), params().first_slot_of(1)),
            Ok(0)
        );
    }

    // #[test]
    // fn test_potential_mana_no_mana() {
    //     assert_eq!(
    //         params().potential_mana(0, params().first_slot_of(1), params().first_slot_of(400)),
    //         Ok(0)
    //     );
    // }

    #[test]
    fn test_potential_mana_negative_delta() {
        assert_eq!(
            params().potential_mana(100, params().first_slot_of(2), params().first_slot_of(1)),
            Err(Error::InvalidEpochDelta {
                created: 2.into(),
                target: 1.into()
            })
        );
    }

    // #[test]
    // fn test_potential_mana_lookup_len_delta() {
    //     assert_eq!(
    //         params().potential_mana(
    //             u64::MAX,
    //             params().first_slot_of(1),
    //             params().first_slot_of(params().mana_structure().decay_factors().len() as u32 + 1)
    //         ),
    //         Ok(183827294847826527)
    //     );
    // }

    // #[test]
    // fn test_potential_mana_lookup_len_delta_multiple() {
    //     assert_eq!(
    //         params().potential_mana(
    //             u64::MAX,
    //             params().first_slot_of(1),
    //             params().first_slot_of(3 * params().mana_structure().decay_factors().len() as u32 + 1)
    //         ),
    //         Ok(410192222442040018)
    //     );
    // }

    // #[test]
    // fn test_potential_mana_same_epoch() {
    //     assert_eq!(
    //         params().potential_mana(u64::MAX, params().first_slot_of(1), params().last_slot_of(1)),
    //         Ok(562881233944575)
    //     );
    // }

    // #[test]
    // fn test_potential_mana_one_epoch() {
    //     assert_eq!(
    //         params().potential_mana(u64::MAX, params().first_slot_of(1), params().last_slot_of(2)),
    //         Ok(1125343946211326)
    //     );
    // }

    // #[test]
    // fn test_potential_mana_several_epochs() {
    //     assert_eq!(
    //         params().potential_mana(u64::MAX, params().first_slot_of(1), params().last_slot_of(3)),
    //         Ok(1687319975062367)
    //     );
    // }

    // #[test]
    // fn test_potential_mana_max_mana() {
    //     assert_eq!(
    //         params().potential_mana(u64::MAX, params().first_slot_of(1), params().first_slot_of(401)),
    //         Ok(190239292158065300)
    //     );
    // }
}
